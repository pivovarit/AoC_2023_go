package day14

import (
	"github.com/pivovarit/aoc/util"
	"reflect"
	"strconv"
	"testing"
)

var input = util.ReadInput()

func Test_run(t *testing.T) {
	run()
}

func BenchmarkParabolicReflectorDishPart1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		parabolicReflectorDishPart1(input)
	}
}

func BenchmarkParabolicReflectorDishPart2(b *testing.B) {
	for i := 0; i < b.N; i++ {
		parabolicReflectorDishPart2(input)
	}
}

func Test_calculateLoad(t *testing.T) {
	tests := []struct {
		name  string
		count int
		want  int
	}{
		{count: 0, want: 0},
		{count: 1, want: 10},
		{count: 2, want: 19},
		{count: 3, want: 27},
		{count: 4, want: 34},
		{count: 5, want: 40},
	}
	for _, tt := range tests {
		t.Run(strconv.Itoa(tt.count), func(t *testing.T) {
			if got := calculateLoad(tt.count, 10); got != tt.want {
				t.Errorf("calculateLoad() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_parabolicReflectorDishPart1(t *testing.T) {
	tests := []struct {
		name  string
		input []string
		want  int
	}{
		{name: "example", input: []string{
			"O....#....",
			"O.OO#....#",
			".....##...",
			"OO.#O....O",
			".O.....O#.",
			"O.#..O.#.#",
			"..O..#O..O",
			".......O..",
			"#....###..",
			"#OO..#....",
		}, want: 136},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := parabolicReflectorDishPart1(tt.input); got != tt.want {
				t.Errorf("parabolicReflectorDishPart1() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_parabolicReflectorDishPart2(t *testing.T) {
	tests := []struct {
		name  string
		input []string
		want  int
	}{
		{name: "example", input: []string{
			"O....#....",
			"O.OO#....#",
			".....##...",
			"OO.#O....O",
			".O.....O#.",
			"O.#..O.#.#",
			"..O..#O..O",
			".......O..",
			"#....###..",
			"#OO..#....",
		}, want: 64},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := parabolicReflectorDishPart2(tt.input); got != tt.want {
				t.Errorf("parabolicReflectorDishPart2() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_tilt(t *testing.T) {
	type args struct {
		direction Direction
		input     [][]rune
	}
	tests := []struct {
		name string
		args args
		want [][]rune
	}{
		{name: "north", args: args{
			direction: north,
			input: [][]rune{
				{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
				{'O', '.', 'O', 'O', '#', '.', '.', '.', '.', '#'},
				{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
				{'O', 'O', '.', '#', 'O', '.', '.', '.', '.', 'O'},
				{'.', 'O', '.', '.', '.', '.', '.', 'O', '#', '.'},
				{'O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'},
				{'.', '.', 'O', '.', '.', '#', 'O', '.', '.', 'O'},
				{'.', '.', '.', '.', '.', '.', '.', 'O', '.', '.'},
				{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
				{'#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.'},
			},
		}, want: [][]rune{
			{'O', 'O', 'O', 'O', '.', '#', '.', 'O', '.', '.'},
			{'O', 'O', '.', '.', '#', '.', '.', '.', '.', '#'},
			{'O', 'O', '.', '.', 'O', '#', '#', '.', '.', 'O'},
			{'O', '.', '.', '#', '.', 'O', 'O', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', '.', '.', '#', '.'},
			{'.', '.', '#', '.', '.', '.', '.', '#', '.', '#'},
			{'.', '.', 'O', '.', '.', '#', '.', 'O', '.', 'O'},
			{'.', '.', 'O', '.', '.', '.', '.', '.', '.', '.'},
			{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
			{'#', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
		}},
		{name: "south", args: args{
			direction: south,
			input: [][]rune{
				{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
				{'O', '.', 'O', 'O', '#', '.', '.', '.', '.', '#'},
				{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
				{'O', 'O', '.', '#', 'O', '.', '.', '.', '.', 'O'},
				{'.', 'O', '.', '.', '.', '.', '.', 'O', '#', '.'},
				{'O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'},
				{'.', '.', 'O', '.', '.', '#', 'O', '.', '.', 'O'},
				{'.', '.', '.', '.', '.', '.', '.', 'O', '.', '.'},
				{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
				{'#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.'},
			},
		}, want: [][]rune{
			{'.', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '#', '.', '.', '.', '.', '#'},
			{'.', '.', '.', 'O', '.', '#', '#', '.', '.', '.'},
			{'.', '.', '.', '#', '.', '.', '.', '.', '.', '.'},
			{'O', '.', 'O', '.', '.', '.', '.', 'O', '#', 'O'},
			{'O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'},
			{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'O', 'O', '.', '.', '.', '.', 'O', 'O', '.', '.'},
			{'#', 'O', 'O', '.', '.', '#', '#', '#', '.', '.'},
			{'#', 'O', 'O', '.', 'O', '#', '.', '.', '.', 'O'},
		}},
		{name: "east", args: args{
			direction: east,
			input: [][]rune{
				{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
				{'O', '.', 'O', 'O', '#', '.', '.', '.', '.', '#'},
				{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
				{'O', 'O', '.', '#', 'O', '.', '.', '.', '.', 'O'},
				{'.', 'O', '.', '.', '.', '.', '.', 'O', '#', '.'},
				{'O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'},
				{'.', '.', 'O', '.', '.', '#', 'O', '.', '.', 'O'},
				{'.', '.', '.', '.', '.', '.', '.', 'O', '.', '.'},
				{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
				{'#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.'},
			},
		}, want: [][]rune{
			{'.', '.', '.', '.', 'O', '#', '.', '.', '.', '.'},
			{'.', 'O', 'O', 'O', '#', '.', '.', '.', '.', '#'},
			{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
			{'.', 'O', 'O', '#', '.', '.', '.', '.', 'O', 'O'},
			{'.', '.', '.', '.', '.', '.', 'O', 'O', '#', '.'},
			{'.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'},
			{'.', '.', '.', '.', 'O', '#', '.', '.', 'O', 'O'},
			{'.', '.', '.', '.', '.', '.', '.', '.', '.', 'O'},
			{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
			{'#', '.', '.', 'O', 'O', '#', '.', '.', '.', '.'},
		}},
		{name: "west", args: args{
			direction: west,
			input: [][]rune{
				{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
				{'O', '.', 'O', 'O', '#', '.', '.', '.', '.', '#'},
				{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
				{'O', 'O', '.', '#', 'O', '.', '.', '.', '.', 'O'},
				{'.', 'O', '.', '.', '.', '.', '.', 'O', '#', '.'},
				{'O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'},
				{'.', '.', 'O', '.', '.', '#', 'O', '.', '.', 'O'},
				{'.', '.', '.', '.', '.', '.', '.', 'O', '.', '.'},
				{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
				{'#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.'},
			},
		}, want: [][]rune{
			{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'O', 'O', 'O', '.', '#', '.', '.', '.', '.', '#'},
			{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
			{'O', 'O', '.', '#', 'O', 'O', '.', '.', '.', '.'},
			{'O', 'O', '.', '.', '.', '.', '.', '.', '#', '.'},
			{'O', '.', '#', 'O', '.', '.', '.', '#', '.', '#'},
			{'O', '.', '.', '.', '.', '#', 'O', 'O', '.', '.'},
			{'O', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
			{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
			{'#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.'},
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tilt(tt.args.direction, tt.args.input); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tilt() = %c, want %c", got, tt.want)
			}
		})
	}
}

func Test_tiltCycle(t *testing.T) {
	tests := []struct {
		name  string
		input [][]rune
		want  [][]rune
	}{
		{name: "1 cycle", input: [][]rune{
			{'O', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'O', '.', 'O', 'O', '#', '.', '.', '.', '.', '#'},
			{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
			{'O', 'O', '.', '#', 'O', '.', '.', '.', '.', 'O'},
			{'.', 'O', '.', '.', '.', '.', '.', 'O', '#', '.'},
			{'O', '.', '#', '.', '.', 'O', '.', '#', '.', '#'},
			{'.', '.', 'O', '.', '.', '#', 'O', '.', '.', 'O'},
			{'.', '.', '.', '.', '.', '.', '.', 'O', '.', '.'},
			{'#', '.', '.', '.', '.', '#', '#', '#', '.', '.'},
			{'#', 'O', 'O', '.', '.', '#', '.', '.', '.', '.'},
		}, want: [][]rune{
			{'.', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'},
			{'.', '.', '.', 'O', 'O', '#', '#', '.', '.', '.'},
			{'.', 'O', 'O', '#', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'},
			{'.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'},
			{'.', '.', '.', '.', 'O', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', 'O', 'O', 'O', 'O'},
			{'#', '.', '.', '.', 'O', '#', '#', '#', '.', '.'},
			{'#', '.', '.', 'O', 'O', '#', '.', '.', '.', '.'},
		}},
		{name: "2 cycle", input: [][]rune{
			{'.', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'},
			{'.', '.', '.', 'O', 'O', '#', '#', '.', '.', '.'},
			{'.', 'O', 'O', '#', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'},
			{'.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'},
			{'.', '.', '.', '.', 'O', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '.', 'O', 'O', 'O', 'O'},
			{'#', '.', '.', '.', 'O', '#', '#', '#', '.', '.'},
			{'#', '.', '.', 'O', 'O', '#', '.', '.', '.', '.'},
		}, want: [][]rune{
			{'.', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'},
			{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
			{'.', '.', 'O', '#', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'},
			{'.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'},
			{'.', '.', '.', '.', 'O', '#', '.', '.', '.', 'O'},
			{'.', '.', '.', '.', '.', '.', '.', 'O', 'O', 'O'},
			{'#', '.', '.', 'O', 'O', '#', '#', '#', '.', '.'},
			{'#', '.', 'O', 'O', 'O', '#', '.', '.', '.', 'O'},
		}},
		{name: "3 cycle", input: [][]rune{
			{'.', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'},
			{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
			{'.', '.', 'O', '#', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'},
			{'.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'},
			{'.', '.', '.', '.', 'O', '#', '.', '.', '.', 'O'},
			{'.', '.', '.', '.', '.', '.', '.', 'O', 'O', 'O'},
			{'#', '.', '.', 'O', 'O', '#', '#', '#', '.', '.'},
			{'#', '.', 'O', 'O', 'O', '#', '.', '.', '.', 'O'},
		}, want: [][]rune{
			{'.', '.', '.', '.', '.', '#', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '#', '.', '.', '.', 'O', '#'},
			{'.', '.', '.', '.', '.', '#', '#', '.', '.', '.'},
			{'.', '.', 'O', '#', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', 'O', 'O', 'O', '#', '.'},
			{'.', 'O', '#', '.', '.', '.', 'O', '#', '.', '#'},
			{'.', '.', '.', '.', 'O', '#', '.', '.', '.', 'O'},
			{'.', '.', '.', '.', '.', '.', '.', 'O', 'O', 'O'},
			{'#', '.', '.', '.', 'O', '#', '#', '#', '.', 'O'},
			{'#', '.', 'O', 'O', 'O', '#', '.', '.', '.', 'O'},
		}},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tiltCycle(tt.input); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("tiltCycle() = %v, want %v", got, tt.want)
			}
		})
	}
}
